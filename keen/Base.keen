Int := []
String := []
Array<a> := []
Option<a> := [None, Some(value : a)]
Bool := [False, True]


error : String -> a = {|message|
    #js throw message
    #js void 0
}

if := {
    |True| {|then| {|_| then() }}
    |False| {|_| {|else| else() }}
}

when := {|condition| {|body| if(condition){ body(); () }{} }}

unless := {|condition| {|body| if(condition){}{ body(); () } }}

while : (() -> Bool) -> (() -> a) -> () = {|condition| {|body|
    when(condition()) {
        body()
        while(condition)(body)
    }
}}

switch : a -> (a -> b) -> b = {|x| {|f| f(x) }}


mapOption : Option<a> -> (a -> b) -> Option<b> = {|option| {|body|
    switch(option) {
        |Some(value = a)| Some(value = body(a))
        |None| None
    }
}}

getOption : Option<a> -> (() -> a) -> a = {|option| {|default|
    switch(option) {
        |Some(value = a)| a
        |None| default()
    }
}}

forceOption : Option<a> -> a = {
    |Some(value = a)| a
    |None| error('forceOption(None)')
}


each : Array<a> -> (a -> b) -> () = {|array| {|body|
    #js for(var i = 0; i < array.length; i++) {
    element := #js array[i]
    body(element)
    #js }
    ()
}}

map : Array<a> -> (a -> b) -> Array<b> = {|array| {|body|
    results := []
    #js for(var i = 0; i < array.length; i++) {
    element := #js array[i]
    result := body(element)
    #js results.push(result)
    #js }
    results
}}

filter : Array<a> -> (a -> Bool) -> Array<a> = {|array| {|body|
    results := []
    #js for(var i = 0; i < array.length; i++) {
    element := #js array[i]
    when(body(element)) {
        #js results.push(element)
    }
    #js }
    results
}}

flatten : Array<Array<a>> -> Array<a> = {|array|
    results := []
    #js for(var i = 0; i < array.length; i++) {
    #js for(var j = 0; j < array[i].length; j++) {
    element := #js array[i][j]
    #js results.push(element)
    #js }
    #js }
    results
}

flatMap : Array<Array<a>> -> (a -> b) -> Array<b> = {|array| {|body|
    results := []
    #js for(var i = 0; i < array.length; i++) {
    #js for(var j = 0; j < array[i].length; j++) {
    element := #js array[i][j]
    result := body(element)
    #js results.push(result)
    #js }
    #js }
    results
}}

length : Array<a> -> Int = {|array|
    #js array.length
}

// The interface should be ... different.
sort : Array<a> -> ((a, a) -> Int) -> Array<a> = {|array| {|order|
    #js array.slice().sort(order)
}}

reverse : Array<a> -> Array<a> = {|array|
    #js array.slice().reverse()
}
