#export Int [], String [], Array [], Option, Bool
#export error, if, when, unless, while, switch
#export some, mapOption, flatMapOption, flattenOption, getOption, forceOption
#export each, map, filter, flatten, flatMap, at, length, sort, reverse, slice

Int := []
String := []
Array<a> := []
Option<a> := [None, Some(value : a)]
Bool := [False, True]


error : String -> a = {|message|
    #js throw message
    #js void 0
}

if : Bool -> (() -> a) -> (() -> a) -> a = {
    |True| {|then| {|_| then() }}
    |False| {|_| {|else| else() }}
}

when : Bool -> (() -> a) -> () = {|condition| {|body| if(condition){ body(); () }{} }}

unless : Bool -> (() -> a) -> () = {|condition| {|body| if(condition){}{ body(); () } }}

while : (() -> Bool) -> (() -> a) -> () = {|condition| {|body|
    when(condition()) {
        body()
        while(condition)(body)
    }
}}

switch : a -> (a -> b) -> b = {|x| {|f| f(x) }}


some : a -> Option<a> = {|a| Some(value = a)}

mapOption : Option<a> -> (a -> b) -> Option<b> = {|option| {|body|
    switch(option) {
        |Some(value = a)| Some(value = body(a))
        |None| None
    }
}}

flatMapOption : Option<a> -> (a -> Option<b>) -> Option<b> = {|option| {|body|
    switch(option) {
        |Some(value = a)| body(a)
        |None| None
    }
}}

flattenOption : Option<Option<a>> -> Option<a> = {
    |Some(value = a)| a
    |None| None
}

getOption : Option<a> -> (() -> a) -> a = {|option| {|default|
    switch(option) {
        |Some(value = a)| a
        |None| default()
    }
}}

forceOption : Option<a> -> a = {
    |Some(value = a)| a
    |None| error('forceOption(None)')
}


each : Array<a> -> (a -> b) -> () = {|array| {|body|
    #js for(var i = 0, l = array.length; i < l; i++) {
    element := #js array[i]
    body(element)
    #js }
    ()
}}

map : Array<a> -> (a -> b) -> Array<b> = {|array| {|body|
    results := []
    #js for(var i = 0, l = array.length; i < l; i++) {
    element := #js array[i]
    result := body(element)
    #js results.push(result)
    #js }
    results
}}

filter : Array<a> -> (a -> Bool) -> Array<a> = {|array| {|body|
    results := []
    #js for(var i = 0, l = array.length; i < l; i++) {
    element := #js array[i]
    when(body(element)) {
        #js results.push(element)
    }
    #js }
    results
}}

flatten : Array<Array<a>> -> Array<a> = {|array|
    results := []
    #js for(var i = 0, l = array.length; i < l; i++) {
    #js for(var j = 0, k = array[i].length; j < k; j++) {
    element := #js array[i][j]
    #js results.push(element)
    #js }
    #js }
    results
}

flatMap : Array<a> -> (a -> Array<b>) -> Array<b> = {|array| {|body|
    results := []
    #js for(var i = 0, l = array.length; i < l; i++) {
    element := #js array[i]
    produced := body(element)
    #js for(var j = 0, k = produced.length; j < k; j++) {
    #js results.push(produced[j])
    #js }
    #js }
    results
}}

at : (Array<a>, Int) -> Option<a> = {|array, n|
    #js if(n < 0 || n >= array.length) {
    none := None
    #js return none
    #js }
    result := #js array[n]
    Some(value = result)
}

length : Array<a> -> Int = {|array|
    #js array.length
}

sort : Array<a> -> ((a, a) -> Bool) -> Array<a> = {|array| {|before|
    #js array.slice().sort(function(a, b) { return before(a, b) ? -1 : before(b, a) ? 1 : 0 })
}}

reverse : Array<a> -> Array<a> = {|array|
    #js array.slice().reverse()
}

slice : (Array<a>, Option<Int>, Option<Int>) -> Array<a> = {
    |array, Some(value = from), Some(value = to)| #js array.slice(from, to)
    |array, Some(value = from), None| #js array.slice(from)
    |array, None, Some(value = to)| #js array.slice(0, to)
    |array, None, None| #js array.slice()
}
